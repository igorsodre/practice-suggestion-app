@page "/Profile"
@using SuggestionApp.Library.Interfaces
@using SuggestionApp.Library.Models

@inject ISuggestionRepository _suggestionRepository
@inject IUserRepository _userRepository
@inject NavigationManager _navigationManager

<h1>My Profile</h1>
<div>
  <div>
    <button @onclick="ClosePage"></button>
  </div>
</div>

<div>
  <h2>My Account</h2>
  <p>
    <a href="#">Edit My Profile</a>
  </p>
</div>

@if (_approved.Any())
{
  <div>
    <h2>Approved Suggestions</h2>
    <p>These are your suggestions that are currently active</p>

    @foreach (var s in _approved)
    {
      <hr>
      <div>
        @s.Title
      </div>
      <p> @s.CreatedAt.ToString("d") </p>
      <p>Total Votes: @s.UserVotes.Count </p>
      <p>@s.Category?.Name</p>
      <p>@s.Description</p>
      @if (s.Status is not null)
      {
        <div>
          @s.Status.Name
        </div>
        <p>
          @((MarkupString)s.OwnerNotes)
        </p>
      }
    }
  </div>
}

@if (_archived.Any())
{
  <div>
    <h2>Archived Suggestions</h2>
    <p>These are your suggestions that were active but did not gain enough traction</p>

    @foreach (var s in _archived)
    {
      <hr>
      <div>
        @s.Title
      </div>
      <p> @s.CreatedAt.ToString("d") </p>
      <p>Total Votes: @s.UserVotes.Count </p>
      <p>@s.Category?.Name</p>
      <p>@s.Description</p>
      @if (s.Status is not null)
      {
        <div>
          @s.Status.Name
        </div>
        <p>
          @((MarkupString)s.OwnerNotes)
        </p>
      }
    }
  </div>
}

@if (_pending.Any())
{
  <div>
    <h2>Pending Suggestions</h2>
    <p>These are your suggestions that have not yet been reviewed by the administrators</p>

    @foreach (var s in _pending)
    {
      <hr>
      <div>
        @s.Title
      </div>
      <p> @s.CreatedAt.ToString("d") </p>
      <p>Total Votes: @s.UserVotes.Count </p>
      <p>@s.Category?.Name</p>
      <p>@s.Description</p>
      @if (s.Status is not null)
      {
        <div>
          @s.Status.Name
        </div>
        <p>
          @((MarkupString)s.OwnerNotes)
        </p>
      }
    }
  </div>
}

@if (_rejected.Any())
{
  <div>
    <h2>Rejected Suggestions</h2>
    <p>These are your suggestions that were not deemed to be approprate for the training suggestion site</p>

    @foreach (var s in _rejected)
    {
      <hr>
      <div>
        @s.Title
      </div>
      <p> @s.CreatedAt.ToString("d") </p>
      <p>Total Votes: @s.UserVotes.Count </p>
      <p>@s.Category?.Name</p>
      <p>@s.Description</p>
      @if (s.Status is not null)
      {
        <div>
          @s.Status.Name
        </div>
        <p>
          @((MarkupString)s.OwnerNotes)
        </p>
      }
    }
  </div>
}


@code {

  private UserModel? _loggedUser;
  private List<SuggestionModel> _submissions = new();
  private List<SuggestionModel> _approved = new();
  private List<SuggestionModel> _archived = new();
  private List<SuggestionModel> _pending = new();
  private List<SuggestionModel> _rejected = new();

  protected override async Task OnInitializedAsync()
  {
  //TODO: Get the user from the authentication system
    _loggedUser = await _userRepository.GetUserFromAuthentication("abc123");

    if (_loggedUser is not null)
    {
      var results = await _suggestionRepository.GetUserSuggestions(_loggedUser.Id);
      _submissions = results.OrderByDescending(s => s.CreatedAt).ToList();
      _approved = _submissions.Where(s => s.ApprovedForRelease && !s.Archived && !s.Rejected).ToList();
      _archived = _submissions.Where(s => s.Archived && !s.Rejected).ToList();
      _pending = _submissions.Where(s => !s.ApprovedForRelease && !s.Rejected).ToList();
      _rejected = _submissions.Where(s => s.Rejected).ToList();
    }
  }

  private void ClosePage()
  {
    _navigationManager.NavigateTo("/");
  }

}
